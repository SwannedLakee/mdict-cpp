name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build-and-test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            compiler: gcc
          - os: ubuntu-latest
            compiler: clang
          - os: windows-latest
            compiler: mingw

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true

    - name: Install dependencies (Ubuntu)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y cmake build-essential

    - name: Install dependencies (Windows)
      if: runner.os == 'Windows'
      run: |
        choco install mingw cmake --installargs '"ADD_CMAKE_TO_PATH=System"'

    - name: Configure and build (Ubuntu)
      if: runner.os == 'Linux'
      run: |
        mkdir build
        cd build
        if [ "${{ matrix.compiler }}" = "gcc" ]; then
          export CC=gcc
          export CXX=g++
        else
          export CC=clang
          export CXX=clang++
        fi
        cmake ..
        make -j$(nproc)

    - name: Configure and build (Windows)
      if: runner.os == 'Windows'
      shell: cmd
      run: |
        set PATH=%PATH%;C:\ProgramData\chocolatey\lib\mingw\tools\install\mingw64\bin
        mkdir build
        cd build
        cmake -G "MinGW Makefiles" -DCMAKE_BUILD_TYPE=Release ..
        mingw32-make -j4

    - name: Run tests (Ubuntu)
      if: runner.os == 'Linux'
      run: |
        cd build/bin
        for test_file in test_*; do
          if [ -f "$test_file" ] && [ -x "$test_file" ]; then
            echo "Running test: $test_file"
            ./"$test_file"
          fi
        done

    - name: Run tests (Windows)
      if: runner.os == 'Windows'
      shell: cmd
      run: |
        cd build\bin
        for %%f in (test_*.exe) do (
          echo Running test: %%f
          %%f
        ) 